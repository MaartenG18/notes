<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maarten&#39;s notes</title>
    <link>https://maarteng18.github.io/notes/</link>
    <description>Recent content on Maarten&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>maartengielkens2000@gmail.com (Maarten Gielkens)</managingEditor>
    <webMaster>maartengielkens2000@gmail.com (Maarten Gielkens)</webMaster><atom:link href="https://maarteng18.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Herhaling MOSFET en BJT</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-1/</guid>
      <description>MOSFET Werking MOS transistor De MOS transistor bestaat uit: een gate gemaakt uit polykristallijn Si boven op een heel dun oxide dat op het Si neergelegd is. een source en een drain die geïmplementeerd zijn a.d.h.v. een pn-junctie gescheiden van de bulk. Wanneer er een spanning aangelegd wordt aan de gate: Eerst zorgen dat ladingsdragers van de bulk, die van een tegengesteld type zijn dan de gewenste ladingsdragers, voldoende ver van onder de gate verdwijnen.</description>
    </item>
    
    <item>
      <title>1. Inleiding</title>
      <link>https://maarteng18.github.io/notes/archive/disch/ch-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/disch/ch-1/</guid>
      <description>Table of contents Herhaling implementatieplatformen FPGA vs. microprocessor Codevoorbeeld Herhaling implementatieplatformen Discrete logica: digitale schakelingen opgebouwd met bijvoorbeeld chips uit de 74-reeks.
Microprocessor: vaste hardware waarop software wordt uitgevoerd, zoals bijvoorbeeld de ATmega328-processor op het Arduino Uno-bord.
ASIC (Application Specific Integrated Circuit): vaste hardware met een specifieke functie.
FPGA (Field-Programmable Gate Array): configureerbare hardware met een regelmatige structuur, waarop specifieke functies geïmplementeerd kunnen worden.
FPGA vs. microprocessor FPGA Bouwblokken van de FPGA CLB: Configurable Logic Block SM: Switch Matrix IOB: Input/Output Block Basisblokken van een CLB FF: Flip-Flop Mutex: Multiplexer LUT: Look-Up Table Kan geconfigureerd worden tot eender welke functie met 4 ingangen en 1 uitgang.</description>
    </item>
    
    <item>
      <title>1. week 1</title>
      <link>https://maarteng18.github.io/notes/courses/algoritmen-en-datastructuren/week-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/algoritmen-en-datastructuren/week-1/</guid>
      <description>Table of contents Initial Exercises Chapter 1: Why Data Structures Matter Chapter 2: Why Algorithms Matter Chapter 3: Big Oh Notation Initial Exercises You retrieve a list of all items that have been sold during the last trimester from a web shop’s database. Unfortunately, you end up with a simple array: if an item was sold three times, it occurs three times in that array. You want to count how many times one particular item has been sold.</description>
    </item>
    
    <item>
      <title>1. week 1</title>
      <link>https://maarteng18.github.io/notes/courses/cct/week-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/cct/week-1/</guid>
      <description>Deel 1: Intro Paper &amp;lsquo;Future Generation Computer Systems&amp;rsquo; lezen (misschien een examenvraag uit deze paper).
Deel 2: Isolatie Zeer korte uitleg van de theorie, ppt nog studeren.</description>
    </item>
    
    <item>
      <title>1. week 1</title>
      <link>https://maarteng18.github.io/notes/courses/databases/week-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/databases/week-1/</guid>
      <description>RDBMS Database Basics ISBN is een string omdat er niet mee gerekend moet worden. Alles waar niet mee gerekend moet worden, wordt als string opgeslaan in een database.
Laatste mermaid:
Pijltje author naar author detail, 1 wil zeggen een boek heeft 1 author en 1&amp;hellip;* zegt dat een author meerdere boeken kan hebben.
Database Componenten Excel bestand in orde maken en library.db bekijken voor te zien hoe het werkt.</description>
    </item>
    
    <item>
      <title>1. week 2</title>
      <link>https://maarteng18.github.io/notes/courses/obj/week-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/obj/week-2/</guid>
      <description>Opdrachten Hoofdstuk 1-4 1.2.1 ✔️
1.2.2 ✔️
1.2.3 ✔️
1.2.4 ✔️
1.2.5 Welke voordelen biedt een klasse als Date ten opzichte van een datum steeds voor te stellen als drie aparte getallen? Zo is het vaak beter om bijvoorbeeld een positie of grootte niet steeds voor te stellen door twee getallen, maar door (heel eenvoudige) klassen of structures. Op die manier wordt code tevens duidelijker. Vergelijk de method drawRect(int, int, int, int) maar met drawRect(Point, Point) of drawRect(Point, Size).</description>
    </item>
    
    <item>
      <title>2. Progammeerbare logica</title>
      <link>https://maarteng18.github.io/notes/archive/disch/ch-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/disch/ch-2/</guid>
      <description>Table of contents Overzicht programmeerbare componenten FPGA-technologie Overzicht programmeerbare componenten Programmeerbare verbindingen Fuse:
Gesloten verbinding, opent onder grote stroom OTP (One-Time Programmable) Antifuse:
Open verbinding, sluit onder hoge spanning OTP SRAM-gebaseerde verbinding:
Pass transistors gecontroleerd door SRAM Volledig CMOS gebaseerd (E)EPROM-gebaseerd:
FAMOS EPROM technologie (UV- erasable) FLOTOX EEPROM technologie Flash technologie Programmeerbare componenten (Simple) Programmable Logic Device ((S)PLD): Programmable Logic Array (PLA) Programmable Array Logic (PAL) Programmable Read Only Memory (PROM, EPROM, EEPROM) Complex PLD (CPLD) Field Programmable Gate Array (FPGA) SPLD Elke functie kan geraliseerd worden in een &amp;ldquo;Sum Of Products&amp;rdquo; (SOP) vorm.</description>
    </item>
    
    <item>
      <title>2. Transistor configuraties</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2. week 2</title>
      <link>https://maarteng18.github.io/notes/courses/algoritmen-en-datastructuren/week-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/algoritmen-en-datastructuren/week-2/</guid>
      <description>Table of contents Initial Exercises Chapter 1: Why Data Structures Matter Chapter 2: Why Algorithms Matter Chapter 3: Big Oh Notation Initial Exercises </description>
    </item>
    
    <item>
      <title>2. week 2-3</title>
      <link>https://maarteng18.github.io/notes/courses/databases/week-2-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/databases/week-2-3/</guid>
      <description>Schrijf een query die alle Customers (volledige naam, customer ID en land) laat zien die niet wonen in de USA. SELECT * FROM customers WHERE Country != &amp;#39;USA&amp;#39; SELECT * FROM customers WHERE Country &amp;lt;&amp;gt; &amp;#39;USA&amp;#39; Schrijf een query die enkel de Customers laat zien die in Brazilië wonen. SELECT * FROM customers WHERE Country = &amp;#39;Brazil&amp;#39;; Schrijf een query die alle Employees laat zien die werken in de Sales afdeling.</description>
    </item>
    
    <item>
      <title>2. week 3</title>
      <link>https://maarteng18.github.io/notes/courses/obj/week-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/obj/week-3/</guid>
      <description>Opdrachten Hoofdstuk 5 2.2.1 Zoek uit hoe std::pair, std::map, std::tuple en std::get() gebruik maken van templates op basis van de documentatie. Waarvoor gebruikt std::map default template argumenten? Waarom geven bepaalde varianten van insert() bij std::map een std::pair terug?
Ze maken gebruik van templates om objecten van alle types te kunnen opslaan zodat er niet voor alle mogelijke datastructuren een andere constructor moet gemaakt worden.
std::map() gebruikt default argumenten voor de compare en allocater variabelen.</description>
    </item>
    
    <item>
      <title>3. Geheugens</title>
      <link>https://maarteng18.github.io/notes/archive/disch/ch-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/disch/ch-3/</guid>
      <description>Table of contents RAM-geheugens ROM-geheugens Geheugenuitbreiding RAM-geheugens Situering RAM Indeling RAM SRAM (Statische RAM) Eigenschappen: Snel toegangelijk Veel oppervlakte Gebruiksgebied: Cachegeheugen DRAM (Dynamische RAM) Eigenschappen: Hoge densiteit Relatief trage uitlezing Gebruiksgebied: Hoofdgeheugen Massageheugen SRAM Opbouw van een SRAM-cel Het basis geheugenelement is een lus van invertoren. Deze lus moet onderbroken worden om te schrijven (8 transistors nodig). We kunnen deze onderbreking weglaten als de transistors die schrijven meer stroom leveren dan de transistores in de geheugencel.</description>
    </item>
    
    <item>
      <title>3. Klasse A versterker</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3. week 4</title>
      <link>https://maarteng18.github.io/notes/courses/databases/week-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/databases/week-4/</guid>
      <description>Vragen nog verbeteren.
RDBMS Transacties Transaction Management Basics Er kan geen media recovery gebruikt worden omdat er bijvoorbeeld in een task een waarde veranderd wordt en deze daarna nog eens kan veranderen binnen dezelfde task. Als dit voorkomt en de data revocery valt toevallig tussen de 2 veranderingen dan zal de database op een fout moment gerecovered worden.
Er kunnen problemen voorkomen zoals berekeningen doen met waarden die niet juist zijn omdat elke task nog de foute waarde ziet omdat de veranderingen van 1 task nog niet gecommit zijn.</description>
    </item>
    
    <item>
      <title>4. Klasse B versterker</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4. Ontwerpprincipes voor synchrone logica</title>
      <link>https://maarteng18.github.io/notes/archive/disch/ch-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/disch/ch-4/</guid>
      <description>Table of contents Voorbeeld ter introductie Ontwerpvoorbeeld: AES Voorbeeld ter introductie Kleren worden gewassen in 3 stappen:
1 wasmand verwerken Het verwerken van 1 wasmand duurt 1 uur Throughput = 1 wasmand/uur Latency per wasmand = 1 uur 3 wasmanden verwerken Het verwerken van 3 wasmanden duurt 3 uren als we de wasmanden 1 voor 1 volledig verwerken Throughput = 1 wasmand/uur Latency per wasmand = 1 uur Verhogen van de throughput Parallellisatie Elke machine wordt 3x voorzien Het verwerken van 3 wasmanden duurt 1 uur Throughput = 3 wasmanden/uur Latency per wasmand = 1 uur Pipelining Throughput = 3 wasmanden/uur (na de opstartfase) Latency per wasmand = 1 uur Wat als het proces meerdere keren wordt doorlopen Stel dat een wasmand 3 keer na mekaar het hele proces moet doorlopen.</description>
    </item>
    
    <item>
      <title>5. Simulatie</title>
      <link>https://maarteng18.github.io/notes/archive/disch/ch-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/disch/ch-5/</guid>
      <description>Table of contents Testbenches Evalutie van een hardware-ontwerp Testbenches Doelstelling van testbenches Het testen van VHDL code (of delen van code) zodat de juiste werking kan getest worden voordat de code geïmplementeerd wordt in een hardware component. Het definiëren van een omgeving die in eens testmachine kan gebruikt worden om een bestaande component te testen. Een elektronisch ontwerp maken op zich volstaat niet. Bij een goed ontwerp bestaat minstens 50 % van de ontwerptijd uit het uitdenken en uitwerken van testen die verzekeren dat het ontwerp functioneert zoals het moet.</description>
    </item>
    
    <item>
      <title>5. voedingen</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6. GaN transistor toepassingen</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>7. Thyristors</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>8. Berekening van elektronische circuits</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>9. Niet-lineaire OpAMP schakelingen</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-9/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Montage</title>
      <link>https://maarteng18.github.io/notes/scripts-commands/imagemagick/montage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/scripts-commands/imagemagick/montage/</guid>
      <description>Paste images underneath eachother With this command you can paste images underneath eachother into a montage.
montage [1-3].PNG -tile 1 -geometry 500x300+1+1 combo.png</description>
    </item>
    
    <item>
      <title>Notices</title>
      <link>https://maarteng18.github.io/notes/scripts-commands/markdown/notices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/scripts-commands/markdown/notices/</guid>
      <description>Note {{% notice note %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer
{{% notice todolist %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer
{{% notice summary %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer
{{% notice info %}} A notice disclaimer {{% /notice %}} renders as
A notice disclaimer
{{% notice tip %}} A notice disclaimer {{% /notice %}} renders as</description>
    </item>
    
    <item>
      <title>10. OTA schakelingen</title>
      <link>https://maarteng18.github.io/notes/archive/ansch/ch-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/archive/ansch/ch-10/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://maarteng18.github.io/notes/courses/algoritmen-en-datastructuren/week-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/algoritmen-en-datastructuren/week-3/</guid>
      <description>2.1.2 N is x O(log n) Kan makkelijker door gewoon te berekenen
2.1.3 N is irrelevant wat constant O(1) want vaste tijd
2.1.4 M = lentge s =&amp;gt; O(M)
N = # strings in array M = lengte langste string =&amp;gt; O(M*N)
2.1.5 Niet echt kennen maar als de code er is, kunnen analyseren hoe snel het is en hoe het werkt.</description>
    </item>
    
  </channel>
</rss>
