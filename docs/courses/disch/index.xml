<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Digitale Elektronische Schakelingen on Maarten&#39;s notes</title>
    <link>https://maarteng18.github.io/notes/courses/disch/</link>
    <description>Recent content in Digitale Elektronische Schakelingen on Maarten&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>maartengielkens2000@gmail.com (Maarten Gielkens)</managingEditor>
    <webMaster>maartengielkens2000@gmail.com (Maarten Gielkens)</webMaster><atom:link href="https://maarteng18.github.io/notes/courses/disch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Inleiding</title>
      <link>https://maarteng18.github.io/notes/courses/disch/ch-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/disch/ch-1/</guid>
      <description>Table of contents Herhaling implementatieplatformen FPGA vs. microprocessor Codevoorbeeld Herhaling implementatieplatformen Discrete logica: digitale schakelingen opgebouwd met bijvoorbeeld chips uit de 74-reeks.
Microprocessor: vaste hardware waarop software wordt uitgevoerd, zoals bijvoorbeeld de ATmega328-processor op het Arduino Uno-bord.
ASIC (Application Specific Integrated Circuit): vaste hardware met een specifieke functie.
FPGA (Field-Programmable Gate Array): configureerbare hardware met een regelmatige structuur, waarop specifieke functies ge√Ømplementeerd kunnen worden.
FPGA vs. microprocessor FPGA Bouwblokken van de FPGA CLB: Configurable Logic Block SM: Switch Matrix IOB: Input/Output Block Basisblokken van een CLB FF: Flip-Flop Mutex: Multiplexer LUT: Look-Up Table Kan geconfigureerd worden tot eender welke functie met 4 ingangen en 1 uitgang.</description>
    </item>
    
    <item>
      <title>2. Progammeerbare logica</title>
      <link>https://maarteng18.github.io/notes/courses/disch/ch-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/disch/ch-2/</guid>
      <description>Table of contents Overzicht programmeerbare componenten FPGA-technologie Overzicht programmeerbare componenten Programmeerbare verbindingen Fuse:
Gesloten verbinding, opent onder grote stroom OTP (One-Time Programmable) Antifuse:
Open verbinding, sluit onder hoge spanning OTP SRAM-gebaseerde verbinding:
Pass transistors gecontroleerd door SRAM Volledig CMOS gebaseerd (E)EPROM-gebaseerd:
FAMOS EPROM technologie (UV- erasable) FLOTOX EEPROM technologie Flash technologie Programmeerbare componenten (Simple) Programmable Logic Device ((S)PLD): Programmable Logic Array (PLA) Programmable Array Logic (PAL) Programmable Read Only Memory (PROM, EPROM, EEPROM) Complex PLD (CPLD) Field Programmable Gate Array (FPGA) SPLD Elke functie kan geraliseerd worden in een &amp;ldquo;Sum Of Products&amp;rdquo; (SOP) vorm.</description>
    </item>
    
    <item>
      <title>3. Geheugens</title>
      <link>https://maarteng18.github.io/notes/courses/disch/ch-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/disch/ch-3/</guid>
      <description>Table of contents RAM-geheugens ROM-geheugens Geheugenuitbreiding RAM-geheugens Situering RAM Indeling RAM SRAM (Statische RAM) Eigenschappen: Snel toegangelijk Veel oppervlakte Gebruiksgebied: Cachegeheugen DRAM (Dynamische RAM) Eigenschappen: Hoge densiteit Relatief trage uitlezing Gebruiksgebied: Hoofdgeheugen Massageheugen SRAM Opbouw van een SRAM-cel Het basis geheugenelement is een lus van invertoren. Deze lus moet onderbroken worden om te schrijven (8 transistors nodig). We kunnen deze onderbreking weglaten als de transistors die schrijven meer stroom leveren dan de transistores in de geheugencel.</description>
    </item>
    
    <item>
      <title>4. Ontwerpprincipes voor synchrone logica</title>
      <link>https://maarteng18.github.io/notes/courses/disch/ch-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/disch/ch-4/</guid>
      <description>Table of contents Voorbeeld ter introductie Ontwerpvoorbeeld: AES Voorbeeld ter introductie Kleren worden gewassen in 3 stappen:
1 wasmand verwerken Het verwerken van 1 wasmand duurt 1 uur Throughput = 1 wasmand/uur Latency per wasmand = 1 uur 3 wasmanden verwerken Het verwerken van 3 wasmanden duurt 3 uren als we de wasmanden 1 voor 1 volledig verwerken Throughput = 1 wasmand/uur Latency per wasmand = 1 uur Verhogen van de throughput Parallellisatie Elke machine wordt 3x voorzien Het verwerken van 3 wasmanden duurt 1 uur Throughput = 3 wasmanden/uur Latency per wasmand = 1 uur Pipelining Throughput = 3 wasmanden/uur (na de opstartfase) Latency per wasmand = 1 uur Wat als het proces meerdere keren wordt doorlopen Stel dat een wasmand 3 keer na mekaar het hele proces moet doorlopen.</description>
    </item>
    
    <item>
      <title>5. Simulatie</title>
      <link>https://maarteng18.github.io/notes/courses/disch/ch-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>maartengielkens2000@gmail.com (Maarten Gielkens)</author>
      <guid>https://maarteng18.github.io/notes/courses/disch/ch-5/</guid>
      <description>Simulatie </description>
    </item>
    
  </channel>
</rss>
