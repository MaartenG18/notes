[
{
	"uri": "https://maarteng18.github.io/notes/courses/",
	"title": "Courses",
	"tags": [],
	"description": "",
	"content": "Current courses Analoge Elektronische Schakelingen Digitale Elektronische Schakelingen Android App Development Besturingssystemen en C Software Engineering Skills "
},
{
	"uri": "https://maarteng18.github.io/notes/",
	"title": "Maarten&#39;s notes",
	"tags": [],
	"description": "",
	"content": "Maarten\u0026rsquo;s notes Current courses Analoge Elektronische Schakelingen Digitale Elektronische Schakelingen Android App Development Besturingssystemen en C Software Engineering Skills Good to know I\u0026rsquo;m currently making a portfolio, more coming soon\n"
},
{
	"uri": "https://maarteng18.github.io/notes/courses/ansch/",
	"title": "Analoge Elektronische Schakelingen",
	"tags": [],
	"description": "",
	"content": "Chapters Herhaling MOSFET en BJT "
},
{
	"uri": "https://maarteng18.github.io/notes/courses/disch/",
	"title": "Digitale Elektronische Schakelingen",
	"tags": [],
	"description": "",
	"content": "Chapters Inleiding Programmeerbare logica Geheugens Ontwerpprincipes voor synchrone logica Simulatie "
},
{
	"uri": "https://maarteng18.github.io/notes/courses/ansch/ch-1/",
	"title": "1. Herhaling MOSFET en BJT",
	"tags": [],
	"description": "",
	"content": "MOSFET BJT "
},
{
	"uri": "https://maarteng18.github.io/notes/courses/disch/ch-1/",
	"title": "1. Inleiding",
	"tags": [],
	"description": "",
	"content": "Table of contents Herhaling implementatieplatformen FPGA vs. microprocessor Codevoorbeeld Herhaling implementatieplatformen Discrete logica: digitale schakelingen opgebouwd met bijvoorbeeld chips uit de 74-reeks.\nMicroprocessor: vaste hardware waarop software wordt uitgevoerd, zoals bijvoorbeeld de ATmega328-processor op het Arduino Uno-bord.\nASIC (Application Specific Integrated Circuit): vaste hardware met een specifieke functie.\nFPGA (Field-Programmable Gate Array): configureerbare hardware met een regelmatige structuur, waarop specifieke functies ge√Ømplementeerd kunnen worden.\nFPGA vs. microprocessor FPGA Bouwblokken van de FPGA CLB: Configurable Logic Block SM: Switch Matrix IOB: Input/Output Block Basisblokken van een CLB FF: Flip-Flop Mutex: Multiplexer LUT: Look-Up Table Kan geconfigureerd worden tot eender welke functie met 4 ingangen en 1 uitgang. Microprocessor De CPU is het hart van een microprocessor en bevat o.a.:\nALU: Arithmatic Logic Unit Register file Programmageheugen Codevoorbeeld We beschouwen een stukje code in een hardwarebeschrijvingstaal (VHDL) en in een programmeertaal (C).\nHet input-outputgedrag van de implementatie is functioneel hetzelfde. De implementatie gebeurt op een volledig andere manier op een FPGA dan op de microprocessor In zowel VHDL als C zijn a en z bytes, in VHDL is sel een bit en in C is sel een byte if sel = \u0026#39;1\u0026#39; then z \u0026lt;= a sll 1; else z \u0026lt;= a srl 1; end if; if((sel \u0026amp; 0x01) == 1) { z = a \u0026lt;\u0026lt; 1; } else { z = a \u0026gt;\u0026gt; 1; } Beide codefragmenten implementeren een schuifbewerking naar links als de selectiebit gelijk is aan 1 en anders een schuifbewerking naar rechts. Dus ofwel wordt:\nz7z6z5z4z3z2z1z0 = a6a5a4a3a2a1a00 (links) z7z6z5z4z3z2z1z0 = 0a7a6a5a4a3a2a1 (rechts) VHDL -\u0026gt; FPGA Er zijn er 2 hardware equivalenten van toepassing:\nEen schuifbewerking is het verbinden van in- en uitgangen met elkaar op een verschoven manier. Kiezen tussen 2 mogelijke waarden op basis van een selectiebit is een multiplexer Hiervoor zijn 8 multiplexers nodig om de 8 bits van z aan te sturen. Om dit op een FPGA te configureren zullen er dus 8 LUT\u0026rsquo;s gebruikt worden zonder FF.\nDe 6 middenste LUT\u0026rsquo;s implementeren een multiplexer. De bovenste en onderste LUT\u0026rsquo;s implementeren een functie die ofwel 0 ofwel de inkomende ai doorlaat op basis van de selectiebit. De LUT\u0026rsquo;s in de CLB\u0026rsquo;s worden verbonden met de juiste in- en uitgangen via Switch Matrices.\nDe LUT\u0026rsquo;s zijn op onderstaande manier geconfigureerd:\nBovenste LUT = bovenste multiplexer: A B C D LUT-out 0 0 x x 0 0 1 x x 0 1 0 x x 1 1 1 x x 0 Middelste LUT (6x) = middelste multiplexer (6x) A B C D LUT-out 0 0 0 x 0 0 0 1 x 0 0 1 0 x 1 0 1 1 x 0 1 0 0 x 0 1 0 1 x 1 1 1 0 x 1 1 1 1 x 1 Onderste LUT = onderster multiplexer A B C D LUT-out 0 0 x x 0 0 1 x x 0 1 0 x x 0 1 1 x x 1 "
},
{
	"uri": "https://maarteng18.github.io/notes/courses/disch/ch-2/",
	"title": "2. Progammeerbare logica",
	"tags": [],
	"description": "",
	"content": "Programmeerbare logica "
},
{
	"uri": "https://maarteng18.github.io/notes/courses/disch/ch-3/",
	"title": "3. Geheugens",
	"tags": [],
	"description": "",
	"content": "Geheugens "
},
{
	"uri": "https://maarteng18.github.io/notes/courses/disch/ch-4/",
	"title": "4. Ontwerpprincipes voor synchrone logica",
	"tags": [],
	"description": "",
	"content": "Ontwerpprincipes voor synchrone logica "
},
{
	"uri": "https://maarteng18.github.io/notes/courses/disch/ch-5/",
	"title": "5. Simulatie",
	"tags": [],
	"description": "",
	"content": "Simulatie "
},
{
	"uri": "https://maarteng18.github.io/notes/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]